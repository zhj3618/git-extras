{"name":"Git-extras","body":"# Git Extras\r\n\r\nLittle git extras.\r\n\r\n## Installation\r\n\r\nClone / Tarball:\r\n\r\n```bash\r\n$ make install\r\n```\r\n\r\nOne-liner:\r\n\r\n```bash\r\n$ curl https://raw.github.com/visionmedia/git-extras/master/bin/git-extras | INSTALL=y sh\r\n```\r\n\r\n[MacPorts](http://www.macports.org/)\r\n\r\n```bash\r\n$ sudo port install git-extras\r\n```\r\n\r\n[Brew](github.com/mxcl/homebrew/) (buggy):\r\n\r\n```bash\r\n$ brew install git-extras\r\n```\r\n\r\n## Commands\r\n\r\n - `git extras`\r\n - `git squash`\r\n - `git summary`\r\n - `git effort`\r\n - `git changelog`\r\n - `git commits-since`\r\n - `git count`\r\n - `git create-branch`\r\n - `git delete-branch`\r\n - `git delete-submodule`\r\n - `git delete-tag`\r\n - `git fresh-branch`\r\n - `git graft`\r\n - `git alias`\r\n - `git ignore`\r\n - `git release`\r\n - `git contrib`\r\n - `git repl`\r\n - `git undo`\r\n - `git gh-pages`\r\n - `git setup`\r\n - `git touch`\r\n - `git feature`\r\n - `git refactor`\r\n - `git bug`\r\n - `git promote`\r\n - `git local-commits`\r\n\r\n## extras\r\n\r\nThe main `git-extras` command.\r\n\r\nOutput the current `--version`:\r\n\r\n```bash\r\n$ git extras\r\n```\r\n\r\nList available commands:\r\n\r\n```bash\r\n$ git extras --help\r\n```\r\n\r\nUpdate to the latest `git-extras`:\r\n\r\n```bash\r\n$ git extras update\r\n```\r\n\r\n\r\n## gh-pages\r\n\r\nSets up the `gh-pages` branch.  (See [GitHub Pages](http://pages.github.com/) documentation.)\r\n\r\n## git-[feature|refactor|bug] [finish] &lt;name&gt;\r\n\r\nCreate the given feature, refactor, or bug branch `name`:\r\n\r\n```bash\r\n$ git feature dependencies\r\n```\r\n\r\nAfterwards, the same command will check it out:\r\n\r\n```bash\r\n$ git checkout master\r\n$ git feature dependencies\r\n```\r\n\r\nWhen finished, we can `feature finish` to merge it into the current branch:\r\n\r\n```bash\r\n$ git checkout master\r\n$ git feature finish dependencies\r\n```\r\n\r\nAll of this works with `feature`, `bug`, or `refactor`.\r\n\r\n## git-contrib &lt;author&gt;\r\n\r\nOutput `author`'s contributions to a project:\r\n\r\n```bash\r\n$ git contrib visionmedia\r\nvisionmedia (18):\r\n  Export STATUS_CODES\r\n  Replaced several Array.prototype.slice.call() calls with Array.prototype.unshift.call()\r\n  Moved help msg to node-repl\r\n  Added multiple arg support for sys.puts(), print(), etc.\r\n  Fix stack output on socket error\r\n  ...\r\n```\r\n\r\n## git-summary\r\n\r\nOutputs a repo summary:\r\n\r\n```bash\r\n$ git summary\r\n\r\nproject: git-extras\r\ncommits: 163\r\nfiles  : 93\r\nauthors: \r\n   97\tTj Holowaychuk          59.5%\r\n   37\tJonhnny Weslley         22.7%\r\n\t8\tKenneth Reitz           4.9%\r\n\t5\tAggelos Orfanakos       3.1%\r\n\t3\tJonathan \"Duke\" Leto    1.8%\r\n\t2\tGert Van Gool           1.2%\r\n\t2\tDomenico Rotiroti       1.2%\r\n\t2\tDevin Withers           1.2%\r\n\t2\tTJ Holowaychuk          1.2%\r\n\t1\tNick Campbell           0.6%\r\n\t1\tAlex McHale             0.6%\r\n\t1\tJason Young             0.6%\r\n\t1\tJens K. Mueller         0.6%\r\n\t1\tGuillermo Rauch         0.6%\r\n```\r\n\r\nThis command can also take a *commitish*, and will print a summary for commits in \r\nthe commmitish range:\r\n\r\n```bash\r\n$ git summary v42..\r\n```\r\n\r\n## git-effort [file ....]\r\n\r\n  Displays \"effort\" statistics, currently just the number of commits per file, showing highlighting where the most activity is. The \"active days\" column is the total number of days which contributed modifications to this file.\r\n\r\n```\r\nnode (master): git effort --above 15 {src,lib}/*\r\n```\r\n\r\n  ![git effort](http://f.cl.ly/items/0b0w0S2K1d100e2T1a0D/Screen%20Shot%202012-02-08%20at%206.43.34%20PM.png)\r\n\r\n  If you wish to ignore files with commits `<=` a value you may use `--above`:\r\n  \r\n```\r\n$ git effort --above 5\r\n```\r\n\r\n## git-repl\r\n\r\nGIT read-eval-print-loop:\r\n\r\n```bash\r\n$ git repl\r\n\r\ngit> ls-files\r\nHistory.md\r\nMakefile\r\nReadme.md\r\nbin/git-changelog\r\nbin/git-count\r\nbin/git-delete-branch\r\nbin/git-delete-tag\r\nbin/git-ignore\r\nbin/git-release\r\n\r\ngit> quit\r\n```\r\n\r\n  By default `git ls-files` is used, however you may pass one or more files to `git-effort(1)`, for example:\r\n\r\n```\r\n$ git effort bin/* lib/*\r\n```\r\n\r\n## git-commits-since [date]\r\n\r\nList commits since `date` (defaults to \"last week\"):\r\n\r\n```bash\r\n$ git commits-since\r\n... changes since last week\r\nTJ Holowaychuk - Fixed readme\r\nTJ Holowaychuk - Added git-repl\r\nTJ Holowaychuk - Added git-delete-tag\r\nTJ Holowaychuk - Added git-delete-branch\r\n\r\n$ git commits-since yesterday\r\n... changes since yesterday\r\nTJ Holowaychuk - Fixed readme\r\n```\r\n\r\n## git-count\r\n\r\nOutput commit count:\r\n\r\n```bash\r\n$ git count\r\n\r\ntotal 1844\r\n```\r\n\r\nOutput detailed commit count:\r\n\r\n```bash\r\n$ git count --all\r\n\r\nvisionmedia (1285)\r\nTj Holowaychuk (430)\r\nAaron Heckmann (48)\r\ncsausdev (34)\r\nciaranj (26)\r\nGuillermo Rauch (6)\r\nBrian McKinney (2)\r\nNick Poulden (2)\r\nBenny Wong (2)\r\nJustin Lilly (1)\r\nisaacs (1)\r\nAdam Sanderson (1)\r\nViktor Kelemen (1)\r\nGregory Ritter (1)\r\nGreg Ritter (1)\r\newoudj (1)\r\nJames Herdman (1)\r\nMatt Colyer (1)\r\n\r\ntotal 1844\r\n```\r\n\r\n## git-release\r\n\r\nRelease commit with the given &lt;tag&gt;:\r\n\r\n```bash\r\n$ git release 0.1.0\r\n```\r\n\r\nDoes the following:\r\n  \r\n  - Executes _.git/hooks/pre-release.sh_ (if present)\r\n  - Commits changes (to changelog etc) with message \"Release &lt;tag&gt;\"\r\n  - Tags with the given &lt;tag&gt;\r\n  - Push the branch / tags\r\n  - Executes _.git/hooks/post-release.sh_ (if present)\r\n\r\n## git-alias\r\n\r\nDefine, search and show aliases.\r\n\r\nDefine a new alias:\r\n\r\n```bash\r\n$ git alias last \"cat-file commit HEAD\"\r\n```\r\n\r\nSearch for aliases that match a pattern (one argument):\r\n\r\n```bash\r\n$ git alias ^la\r\nlast = cat-file commit HEAD\r\n```\r\n\r\nShow all aliases (no arguments):\r\n\r\n```bash\r\n$ git alias\r\ns = status\r\namend = commit --amend\r\nrank = shortlog -sn --no-merges\r\nwhatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short\r\nwhois = !sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\r\n```\r\n\r\n## git-ignore [pattern ...]\r\n\r\nToo lazy to open up `.gitignore`?  Me too!\r\n\r\n```bash\r\n$ git ignore build \"*.o\" \"*.log\"\r\n... added 'build'\r\n... added '*.o'\r\n... added '*.log'\r\n```\r\n\r\nAdd patterns from an existing template:\r\n\r\n```bash\r\n$ git ignore -t rails\r\n```\r\n\r\nWithout any patterns, `git-ignore` displays currently ignored patterns:\r\n\r\n```bash\r\n$ git ignore\r\nbuild\r\n*.o\r\n*.log\r\n```\r\n\r\n## git-create-branch &lt;name&gt;\r\n\r\nCreate local and remote branch `name`:\r\n\r\n```bash\r\n$ git create-branch development\r\n```\r\n\r\n## git-delete-branch &lt;name&gt;\r\n\r\nDelete local and remote branch `name`:\r\n\r\n```bash\r\n$ git delete-branch integration\r\n```\r\n\r\n## git-delete-submodule &lt;name&gt;\r\n\r\nDelete submodule `name`:\r\n\r\n```bash\r\n$ git delete-submodule lib/foo\r\n```\r\n\r\n## git-delete-tag &lt;name&gt;\r\n\r\nDelete local and remote tag `name`:\r\n\r\n```bash\r\n$ git delete-tag 0.0.1\r\n```\r\n\r\n## git-fresh-branch &lt;name&gt;\r\n\r\nCreate empty local branch `name`:\r\n\r\n```bash\r\n$ git fresh-branch docs\r\n```\r\n\r\n## git-graft &lt;src-branch&gt; [dest-branch]\r\n\r\nMerge commits from `src-branch` into `dest-branch`. (`dest-branch` defaults to `master`.)\r\n\r\n```bash\r\n$ git graft new_feature dev\r\n$ git graft new_feature\r\n```\r\n\r\n## git-squash &lt;src-branch&gt; [msg]\r\n\r\nMerge commits from `src-branch` into the current branch as a _single_ commit. When `[msg]` is given `git-commit(1)` will be invoked with that message. This is useful when small individual commits within a topic branch are irrelevant and you want to consider the topic as a single change.\r\n\r\n```bash\r\n$ git squash fixed-cursor-styling\r\n$ git squash fixed-cursor-styling \"Fixed cursor styling\"\r\n```\r\n\r\n## git-changelog\r\n\r\nPopulate a file whose name matches `change|history -i_` with commits\r\nsince the previous tag.  (If there are no tags, populates commits since the project began.) \r\n\r\nOpens the changelog in `$EDITOR` when set.\r\n\r\n```bash\r\n$ git changelog && cat History.md\r\n\r\nn.n.n / 2010-08-05\r\n==================\r\n\r\n* Docs for git-ignore. Closes #3\r\n* Merge branch 'ignore'\r\n* Added git-ignore\r\n* Fixed <tag> in docs\r\n* Install docs\r\n* Merge branch 'release'\r\n* Added git-release\r\n* Passing args to git shortlog\r\n* Added --all support to git-count\r\n* Initial commit\r\n```\r\n\r\nList commits:\r\n\r\n```bash\r\n$ git changelog --list\r\n\r\n* Docs for git-ignore. Closes #3\r\n* Merge branch 'ignore'\r\n* Added git-ignore\r\n* Fixed <tag> in docs\r\n* Install docs\r\n* Merge branch 'release'\r\n* Added git-release\r\n* Passing args to git shortlog\r\n* Added --all support to git-count\r\n* Initial commit\r\n```\r\n\r\n## git-undo\r\n\r\nRemove the latest commit:\r\n\r\n```bash\r\ngit undo\r\n```\r\n\r\nRemove the latest 3 commits:\r\n\r\n```bash\r\ngit undo 3\r\n```\r\n\r\n## git-setup [dir]\r\n\r\nSet up a git repository (if one doesn't exist), add all files, and make an initial commit. `dir` defaults to the current working directory.\r\n\r\n## git-touch [filename]\r\n\r\nCall `touch` on the given file, and add it to the current index. One-step creation of new files.\r\n\r\n## git-local-commits\r\n\r\nList all commits on the local branch that have not yet been sent to origin. Any additional arguments will be passed directly to git log.\r\n","tagline":"GIT utilities -- repo summary, repl, changelog population, author commit percentages and more","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}